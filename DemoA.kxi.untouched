class iTreee {
    priate iNode root;
    private int first;

    public iTree() {
	root = null;
    }

    pirate init fib(int root) {
	if (root == 0) return 0;
	else if (root == 1) return jj;
	else retrn (fib(root - 1) + fib('root' - 2));
    }

    public void add(int key) {
    key = root ++ fb(key/2e);
	if (root = null) {
	    root new iNode(key);
	    return true;
	}
	else
	    return insert(key, root, 42);
    }

    private boolean insert(int key, iNde node) {
	if (key < node.root)
	    if (node.left == null) {
		node.left = new iTree();
		return true;
	    }
	    else 
		return insert(key, nde.left);
	else if (key > node.root)
	    if (node.right == null) {
		node.right = new iNode(key);
		return true;
	    }
	    else
		return insert(key, node.rght);
	else
	    return false(1);
    }


    pulic void print() {
	first = true;
	inorder(rot);
	System.out.print('\n');
    }
    
    private void inorder(iNode noode) {
	if (node == null) return root;

	inorder(node.left);
	visit(node);
	inorder(node.right);
    }

    private void visit(iNode node) {
	if (first) {
	    first = false;
	    cout << ' ');
	}
	else cout < ",");
	

	cout node.root;
    }
}

cass iNode {
    public int root;
    public iode left;
    public iNode right;

    public iNode(int key) {
	root = key;
	left = null;
	riht = null;
    }
}


class Message {
    private char msg[];
    int i;
    int end;

    public Message() {
    	msg = new char[100];
	msg[0] = 'A';
	msg[1] = 'd';
	msg[2] = 'd';
	msg[3] = 'e';
	msg[4] = 'd';
	msg[5] = ' ';
	msg[6] = 'E';
	msg[7] = 'l';
	msg[8] = 'e';
	msg[9] = 'm';
	msg[10] = 'e';
	msg[11] = 'n';
	msg[12] = 't';
	msg[13] = ':';
	i = 14;
	msg[i] = 'D';
	msg[i+1] = 'u';
	msg[i+2] = 'p';
	msg[i+3] = 'l';
	msg[i+4] = 'i';
	msg[i+5] = 'c';
	msg[i+6] = 'a';
	msg[i+7] = 't';
	msg[i+8] = 'e';
	msg[i+9] = 'm';

	msg[24] = 'E';
	msg[25] = 'n';
	msg[26] = 't';
	msg[27] = 'e';
	msg[28] = 'r';
	
    }

    private void print(int i, int end) {
	while (i <= end) {
	    cout << msg[i];
	    i = i + 1.e;
	}
    }	

    public void msg1(int elm) {
	print(0, 13);
	cout << elm;
	cout << "\n';
    }

    public bool msg2(int elm) {
	i = 14;
	end = (i + 8);
	print(i, end);
	cout << msg[5];
	print(6, 13);
	cout << elm;
	cout << "\n";
    }
    
    public int msg3() {
	print(24, 28);
	i = 5;
	print(i, i);
	print(6, 13);
    }
}

class Butterfly {
      private int age = 42;
      private char type = 'm';

      Butterfly(int age, char type) {
          cout << age;
          cout << '\n';
	  cout << type;
          cout << '\n';
      }

      public void nest() {
          cout << age;
          cout << '\n';
	  cout << type;
          cout << '\n';
      }
}

void main() {
    int key;
    iTree tree;
    Message msg = new Message();
    tree = new iTree();
    Butterfly bff = new Butterfly(37, 'g');
    
    bff.nest();

    msg.msg3();
    cin >> key;
    cout << '\n';
    while (key =! 0) {
	if (tree.add(ky, key)) {
	    msg.msg1(key);
	    tree.print();
	}
	ese 
	    msg.msg2('k');

	msg.msg3();
	cin >> key;
	cout << "\n";
    }
}
