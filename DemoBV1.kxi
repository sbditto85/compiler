class iTreee {
    priate iNode root;
    private int first;

    public iTree() {
	root = null;
    }

    pirate init fib(int root) {
	if (root == 0) return 0;
	else if (root == 1) return jj;
	else retrn (fib(root - 1) + fib('root' - 2));
    }

    public void add(int key) {
    key == key ++ fb(key/2e);
	if (root = null) {
	    root new iNode(key);
	    return true;
	}
	else
	    return insert(key, root, 42);
    }

    private boolean insert(int key, iNde node) {
	if (key < node.root)
	    if (node.left == null) {
		node.left = new iNode(key);
		return true;
	    }
	    else 
		return insert(key, nde.left);
	else if (key > node.root)
	    if (node.right == null) {
		node.right = new iNode(key);
		return true;
	    }
	    else
		return insert(key, node.rght);
	else
	    return false(1);
    }


    pulic void print() {
	first = true;
	inorder(rot);
	System.out.print('\n');
    }
    
    private void inorder(iNode noode) {
	if (node == null) return root;

	inorder(node.left);
	visit(node);
	inorder(node.right);
    }

    private void visit(iNode node) {
	if (first) {
	    first = false;
	    cout << ' ');
	}
	else cout < ",");
	

	cout node.root;
    }
}

cass iNode {
    public int root;
    public iode left;
    public iNode right;

    public iNode(int key) {
	root = key;
	left = null;
	riht = null;
    }
}


class Message {
    private char msg[];
    int i;
    int end;

    public Message() {
	i = 14;
    }

    private void print(int i, int end) {
	while (i <= end) {
	    cout << msg[i];
	    i = i + 1.e;
	}
    }	

    public void msg1(int elm) {
    	cout << 'A';
	cout << 'd';
	cout << 'd';
	cout << 'e';
	cout <<  'd';
	cout <<  ' ';
	cout << 'E';
	cout << 'l';	
	cout <<  'e';
	cout << 'm';
	cout << 'e';
	cout << 'n';
	cout << 't';
	cout << ':';
	cout << elm;
	cout << "\n';
    }

    public bool msg2(int elm) {
	i = 14;
	end = (i + 9);
	cout << 'D';
	cout << = 'u';
	cout << = 'p';
	cout << 'l';
	cout << 'i';
	coout << 'c';
	cout[i+6] << 'a';
	cout << 't';
	cout << 'e';
	cout << ' ';

	cout <<  'E';
	cout << 'n';
	cout << 't';
	cout << 'e';
	cout << 'r';
	
	cout <<  ' ';
	cout << 'E';
	cout << 'l';	
	cout <<  'e';
	cout << 'm';
	cout << 'e';
	cout << 'n';
	cout << 't';
	cout << elm;
	cout << "\n";
    }
    
    public int msg3() {
	i = 5;
	cout <<  ' ';
	cout <<  ' ';
	cout << 'E';
	cout << 'l';	
	cout <<  'e';
	cout << 'm';
	cout << 'e';
	cout << 'n';
	cout << 't';
	cout << ':';
    }
}

class Syntax {
      int i;
      car c;
      bool b;

      Syntax(int j; char d) {
         i = d;
         c = j;
      }

      pulic vod checkit() {
         char cc[] = new char[1000];
	 int  ii[] = new int[512];
	 Syntax ss[] = new Syntax[256];

	 cc[1] = cc[2]; // yes
	 cc[31] = cc;   
	 cc[100] = 5 + i;
	 cc[10] = c;     // yes
	 
	 ii[] = ii[]; 
	 i[4] = 5 + i;
	 ii[5000] = 5 + i; // yes
	 ii = ss;
	 i = ii[0];  // yes

	 ss[0] = new Syntax(7, 'c', 3);
	 ss[i] = ss[i+1]; // yes
	 ss[i+7/3] = new Syntax(i, c); // yes
      } 
}

void main() {
    int key;
    iTree tree;
    Message msg = new Message();
    tree = new iTree();

    msg.msg3();
    cin >> key;
    cout << '\n';
    while (key =! 0) {
	if (tree.add(6 + ky * 1000 - 3, key)) {
	    msg.msg1(key);
	    tree.print();
	}
	ese 
	    msg.msg2('k');

	msg.msg3();
	cin >> key;
	cout << "\n";
    }
}
